"use strict";function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _get=function(t,e,a){for(var r=!0;r;){var n=t,i=e,c=a;r=!1,null===n&&(n=Function.prototype);var s=Object.getOwnPropertyDescriptor(n,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(c)}var o=Object.getPrototypeOf(n);if(null===o)return;t=o,e=i,a=c,r=!0,s=o=void 0}},_createClass=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),Map=function(){function t(e){var a=this;_classCallCheck(this,t),this.WIDTH=e.width,this.HEIGHT=.4*e.width,this.scale=this.WIDTH/1e3,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.width=this.WIDTH,this.canvas.height=this.HEIGHT,e.container.appendChild(this.canvas),this.ctx.drawSvg("world.svg",0,0,this.WIDTH,this.HEIGHT),this.mapDate=this.ctx.getImageData(0,0,this.WIDTH,this.HEIGHT),this.container={},this.count=0,this.particles={},this.particle=function(){var t=0;return function(e,r,n,i,c,s,l,o,u){a.particles[++t]={index:t,x:e,y:r,r:n,o:i,c:c,xv:s,yv:l,rv:o,ov:u}}}()}return _createClass(t,[{key:"trigger",value:function(t,e){t=this.getXY(t),e=this.getXY(e);var a=+new Date,r="#21b384",n="#e32528",i="#F8BD19";if(!this.container[a]){var c={start:t,end:e,startColor:r,endColor:n,particleColor:i,duration:1e3,radius:70+parseInt(20*Math.random()),xv:.02*(t.x-e.x),yv:.02*(t.y-e.y)};this.container[a]=c,this.count++||this.draw()}}},{key:"clear",value:function(){this.ctx.clearRect(0,0,this.WIDTH,this.HEIGHT),this.ctx.putImageData(this.mapDate,0,0)}},{key:"draw",value:function(){var t=+new Date;this.clear();var e=!0,a=!1,r=void 0;try{for(var n,i=Object.keys(this.particles)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var c=n.value,s=this.particles[c];this.ctx.beginPath(),this.ctx.arc(s.x,s.y,s.r,0,2*Math.PI),this.ctx.globalAlpha=s.o,this.ctx.fillStyle=s.c,this.ctx.fill(),s.x+=s.xv,s.y+=s.yv,s.r+=s.rv,s.o+=s.ov,(s.r<0||s.o<0)&&delete this.particles[s.index]}}catch(l){a=!0,r=l}finally{try{!e&&i["return"]&&i["return"]()}finally{if(a)throw r}}var o=!0,u=!1,h=void 0;try{for(var p,d=Object.keys(this.container)[Symbol.iterator]();!(o=(p=d.next()).done);o=!0){var c=p.value,m=t-c,y=this.container[c];if(m<y.duration){var v=this.easeOutQuint(m,0,y.radius,y.duration),f=y.start.x+m/y.duration*(y.end.x-y.start.x),g=y.start.y+m/y.duration*(y.end.y-y.start.y),x=this.easeOutQuint(m,1,-1,y.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=y.startColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(y.start.x,y.start.y,v,0,2*Math.PI),this.ctx.stroke();var w=Math.sqrt(y.xv*y.xv+y.yv*y.yv)/5;1>w&&(w=1);for(var E=Math.ceil(w),R=w/E,b=0;E>b;b++)this.particle(f-y.xv*b/E,g-y.yv*b/E,7,R,y.particleColor,.6*Math.random()-.3,.6*Math.random()-.3,-.3,-.05*R)}else if(m<2*y.duration){var v=this.easeOutQuint(m-y.duration,0,y.radius,y.duration),x=this.easeOutQuint(m-y.duration,1,-1,y.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=y.endColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(y.end.x,y.end.y,v,0,2*Math.PI),this.ctx.stroke()}else delete this.container[c],this.count--}}catch(l){u=!0,h=l}finally{try{!o&&d["return"]&&d["return"]()}finally{if(u)throw h}}this.count&&window.requestAnimationFrame(this.draw.bind(this))}},{key:"getXY",value:function(t){return{x:(2.6938*t.lon+465.4)*this.scale,y:(-2.6938*t.lat+227.066)*this.scale}}},{key:"easeOutQuint",value:function(t,e,a,r){return a*Math.sin(t/r*(Math.PI/2))+e}}]),t}(),AttackList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){var t=[],e=!0,a=!1,r=void 0;try{for(var n,i=Object.keys(this.props.list)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var c=n.value;t.push({country:c,count:this.props.list[c]})}}catch(s){a=!0,r=s}finally{try{!e&&i["return"]&&i["return"]()}finally{if(a)throw r}}return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"#"),React.createElement("th",null,"attackorigin"==this.props.className?"Origin":"Targets")),t.sort(function(t,e){return e.count-t.count}).slice(0,9).map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.count),React.createElement("td",null,t.country))}))}}]),e}(React.Component),RealTimeList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("table",{className:this.props.className},React.createElement("tbody",null,React.createElement("tr",{className:"first-head"},React.createElement("th",null,"Timestamp"),React.createElement("th",{colSpan:"3"},"Attacker"),React.createElement("th",null,"Target"),React.createElement("th",{colSpan:"2"},"Type")),React.createElement("tr",null,React.createElement("th",{width:"200px"}),React.createElement("th",{width:"280px"},"Origin"),React.createElement("th",{width:"240px"},"Location"),React.createElement("th",{width:"160px"},"IP"),React.createElement("th",{width:"200px"},"Location"),React.createElement("th",{width:"100px"},"Service"),React.createElement("th",null,"Port"))),this.props.realtime.map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.Time),React.createElement("td",null,t.Origin.org),React.createElement("td",null,t.Origin.location),React.createElement("td",null,t.Origin.ip),React.createElement("td",null,t.Targets),React.createElement("td",null,t.Type.service),React.createElement("td",null,t.Type.port))}))}}]),e}(React.Component),Info=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("div",{className:"info"},React.createElement(AttackList,{list:this.props.origin,className:"attackorigin"}),React.createElement(AttackList,{list:this.props.targets,className:"attacktargets"}),React.createElement(RealTimeList,{realtime:this.props.realtime,className:"realtime"}))}}]),e}(React.Component),map=new Map({container:document.querySelector(".map"),width:document.body.clientWidth,worldmap:worldmap}),list=document.querySelector(".list"),origin={},targets={},realtime=[],ws=new WebSocket("ws://map.norsecorp.com/socketcluster/");ws.onopen=function(){ws.send(JSON.stringify({event:"#handshake",data:{authToken:null},cid:1})),ws.send(JSON.stringify({event:"#subscribe",data:{channel:"global"},cid:2}))},ws.onmessage=function(t){if("#1"===t.data)return void ws.send("#2");if("#publish"===JSON.parse(t.data).event){var e=JSON.parse(t.data).data.data[0],a={lat:+e.latitude,lon:+e.longitude},r={lat:+e.latitude2,lon:+e.longitude2},n=worldmap.name[e.countrycode]||"Unknow";origin[n]?origin[n]++:origin[n]=1;var i=worldmap.name[e.countrycode2]||"Unknow";targets[i]?targets[i]++:targets[i]=1,realtime.push({Time:(new Date).toLocaleString(),Origin:{org:e.org,location:e.city+","+n,ip:e.md5},Targets:i,Type:{service:e.svc,port:e.dport}}),realtime.length>8&&realtime.shift(),React.render(React.createElement(Info,{className:"info",origin:origin,targets:targets,realtime:realtime}),list),map.trigger(a,r)}},ws.onerror=function(t){alert("WebSocket发生异常，请重新刷新网页。"),console.log(t)};
//# sourceMappingURL=data:application/json;base64,
