"use strict";function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _get=function(t,e,r){for(var a=!0;a;){var n=t,i=e,s=r;o=l=c=void 0,a=!1,null===n&&(n=Function.prototype);var o=Object.getOwnPropertyDescriptor(n,i);if(void 0!==o){if("value"in o)return o.value;var c=o.get;return void 0===c?void 0:c.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return void 0;t=l,e=i,r=s,a=!0}},_createClass=function(){function t(t,e){for(var r=0;r<e.length;r++){var a=e[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,r,a){return r&&t(e.prototype,r),a&&t(e,a),e}}(),Map=function(){function t(e){_classCallCheck(this,t),this.scale=e.width/1e3,this.svg=this.createSVGElement("svg",{width:e.width,height:e.height}),e.container.appendChild(this.svg);var r=!0,a=!1,n=void 0;try{for(var i,s=Object.keys(e.worldmap.shapes)[Symbol.iterator]();!(r=(i=s.next()).done);r=!0){var o=i.value,c=this.createSVGElement("path",{stroke:"#ccc6ae",fill:"#000",d:e.worldmap.shapes[o],transform:"scale("+this.scale+")"});this.svg.appendChild(c)}}catch(l){a=!0,n=l}finally{try{!r&&s["return"]&&s["return"]()}finally{if(a)throw n}}this.container={},this.count=0}return _createClass(t,[{key:"createSVGElement",value:function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg",t);return this.setAttr(r,e)}},{key:"setAttr",value:function(t,e){var r=!0,a=!1,n=void 0;try{for(var i,s=Object.keys(e)[Symbol.iterator]();!(r=(i=s.next()).done);r=!0){var o=i.value;t.setAttribute(o,e[o])}}catch(c){a=!0,n=c}finally{try{!r&&s["return"]&&s["return"]()}finally{if(a)throw n}}return t}},{key:"trigger",value:function(t,e){t=this.getXY(t),e=this.getXY(e);var r=+new Date,a="#21b384",n="#e32528";if(!this.container[r]){var i={"stroke-width":2,"fill:":"none",r:0,opacity:1},s=this.createSVGElement("circle",i),o=this.createSVGElement("circle",i);i={stroke:n,"stroke-width":5,opacity:.5,"stroke-linecap":"round",d:"M"+t.cx+" "+t.cy+" L"+e.cx+" "+e.cy};var c=this.createSVGElement("path",i),l=c.getTotalLength();this.setAttr(c,{"stroke-dasharray":l,"stroke-dashoffset":l}),this.setAttr(s,{stroke:a,cx:t.cx,cy:t.cy}),this.setAttr(o,{stroke:n,cx:e.cx,cy:e.cy}),this.svg.appendChild(s),this.svg.appendChild(o),this.svg.appendChild(c);var u={startCircle:s,endCircle:o,path:c,totalLength:l,duration:1e3,radius:70+parseInt(20*Math.random()),stage:0};this.container[r]=u,this.count++||this.draw()}}},{key:"draw",value:function(){var t=+new Date,e=!0,r=!1,a=void 0;try{for(var n,i=Object.keys(this.container)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var s=n.value,o=t-s,c=this.container[s];if(o<c.duration){var l=this.easeOutQuint(o,0,c.radius,c.duration),u=this.easeOutQuint(o,c.totalLength,-2*c.totalLength,c.duration),h=this.easeOutQuint(o,1,-1,c.duration);this.setAttr(c.startCircle,{r:l,opacity:h}),this.setAttr(c.path,{"stroke-dashoffset":u})}else if(o<2*c.duration){0===c.stage&&(this.svg.removeChild(c.startCircle),this.svg.removeChild(c.path),c.stage=1);var l=this.easeOutQuint(o-c.duration,0,c.radius,c.duration),h=this.easeOutQuint(o-c.duration,1,-1,c.duration);this.setAttr(c.endCircle,{r:l,opacity:h})}else this.svg.removeChild(c.endCircle),delete this.container[s],this.count--}}catch(p){r=!0,a=p}finally{try{!e&&i["return"]&&i["return"]()}finally{if(r)throw a}}this.count&&window.requestAnimationFrame(this.draw.bind(this))}},{key:"getXY",value:function(t){return{cx:(2.6938*t.lon+465.4)*this.scale,cy:(-2.6938*t.lat+227.066)*this.scale}}},{key:"easeOutQuint",value:function(t,e,r,a){return r*Math.sin(t/a*(Math.PI/2))+e}}]),t}(),AttackList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){var t=[],e=!0,r=!1,a=void 0;try{for(var n,i=Object.keys(this.props.list)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var s=n.value;t.push({country:s,count:this.props.list[s]})}}catch(o){r=!0,a=o}finally{try{!e&&i["return"]&&i["return"]()}finally{if(r)throw a}}return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"attackorigin"==this.props.className?"Origin":"Targets"),React.createElement("th",null,"Count")),t.sort(function(t,e){return e.count-t.count}).slice(0,9).map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.country),React.createElement("td",null,t.count))}))}}]),e}(React.Component),RealTimeList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"Time"),React.createElement("th",null,"Origin"),React.createElement("th",null,"Targets"),React.createElement("th",null,"Type")),this.props.realtime.map(function(t){return React.createElement("tr",null,React.createElement("td",{width:"200"},t.Time),React.createElement("td",null,t.Origin),React.createElement("td",{width:"200"},t.Targets),React.createElement("td",null,t.Type))}))}}]),e}(React.Component),Info=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("div",{className:"info"},React.createElement(AttackList,{list:this.props.origin,className:"attackorigin"}),React.createElement(AttackList,{list:this.props.targets,className:"attacktargets"}),React.createElement(RealTimeList,{realtime:this.props.realtime,className:"realtime"}))}}]),e}(React.Component),map=new Map({container:document.querySelector(".map"),width:screen.width,height:.4*screen.width,worldmap:worldmap}),list=document.querySelector(".list"),origin={},targets={},realtime=[],ws=new WebSocket("ws://mbsd.ipviking.com:443");ws.onmessage=function(t){var e=JSON.parse(t.data),r={lat:+e.latitude,lon:+e.longitude},a={lat:+e.latitude2,lon:+e.longitude2},n=worldmap.name[e.countrycode]||"Unknow";origin[n]?origin[n]++:origin[n]=1;var i=worldmap.name[e.countrycode2]||"Unknow";targets[i]?targets[i]++:targets[i]=1,realtime.push({Time:(new Date).toLocaleString(),Origin:n,Targets:i,Type:services[e.dport]||"Unknow"}),realtime.length>8&&realtime.shift(),React.render(React.createElement(Info,{className:"info",origin:origin,targets:targets,realtime:realtime}),list),map.trigger(r,a)};
//# sourceMappingURL=data:application/json;base64,