"use strict";function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _get=function(t,e,a){for(var r=!0;r;){var i=t,n=e,s=a;c=l=o=void 0,r=!1,null===i&&(i=Function.prototype);var c=Object.getOwnPropertyDescriptor(i,n);if(void 0!==c){if("value"in c)return c.value;var o=c.get;return void 0===o?void 0:o.call(s)}var l=Object.getPrototypeOf(i);if(null===l)return void 0;t=l,e=n,a=s,r=!0}},_createClass=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),Map=function(){function t(e){var a=this;_classCallCheck(this,t),this.WIDTH=e.width,this.HEIGHT=.4*e.width,this.scale=this.WIDTH/1e3,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.width=this.WIDTH,this.canvas.height=this.HEIGHT,e.container.appendChild(this.canvas),this.ctx.drawSvg("world.svg",0,0,this.WIDTH,this.HEIGHT),this.mapDate=this.ctx.getImageData(0,0,this.WIDTH,this.HEIGHT),this.container={},this.particles={},this.particle=function(){var t=0;return function(e,r,i,n,s,c,o,l,u){a.particles[++t]={index:t,x:e,y:r,r:i,o:n,c:s,xv:c,yv:o,rv:l,ov:u}}}(),this.count=0}return _createClass(t,[{key:"trigger",value:function(t,e){t=this.getXY(t),e=this.getXY(e);var a=+new Date,r="#21b384",i="#e32528",n="#F8BD19";if(!this.container[a]){var s={start:t,end:e,startColor:r,endColor:i,particleColor:n,duration:1e3,radius:70+parseInt(20*Math.random()),stage:0,xv:(t.x-e.x)/500,yv:(t.y-e.y)/500};this.container[a]=s,this.count++||this.draw()}}},{key:"clear",value:function(){this.ctx.clearRect(0,0,this.WIDTH,this.HEIGHT),this.ctx.putImageData(this.mapDate,0,0)}},{key:"draw",value:function(){var t=+new Date;this.clear();var e=!0,a=!1,r=void 0;try{for(var i,n=Object.keys(this.particles)[Symbol.iterator]();!(e=(i=n.next()).done);e=!0){var s=i.value,c=this.particles[s];this.ctx.beginPath(),this.ctx.arc(c.x,c.y,c.r,0,2*Math.PI),this.ctx.globalAlpha=c.o,this.ctx.fillStyle=c.c,this.ctx.fill(),c.x+=c.xv,c.y+=c.yv,c.r+=c.rv,c.o+=c.ov,(c.r<0||c.o<0)&&delete this.particles[c.index]}}catch(o){a=!0,r=o}finally{try{!e&&n["return"]&&n["return"]()}finally{if(a)throw r}}var l=!0,u=!1,h=void 0;try{for(var p,m=Object.keys(this.container)[Symbol.iterator]();!(l=(p=m.next()).done);l=!0){var s=p.value,d=t-s,v=this.container[s];if(d<v.duration){var y=this.easeOutQuint(d,0,v.radius,v.duration),f=v.start.x+d/v.duration*(v.end.x-v.start.x),g=v.start.y+d/v.duration*(v.end.y-v.start.y),x=this.easeOutQuint(d,1,-1,v.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=v.startColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(v.start.x,v.start.y,y,0,2*Math.PI),this.ctx.stroke();var w=Math.sqrt(v.xv*v.xv+v.yv*v.yv)/5;1>w&&(w=1);for(var b=Math.ceil(w),k=w/b,E=0;b>E;E++)this.particle(f-v.xv*E/b,g-v.yv*E/b,7,k,v.particleColor,.6*Math.random(),.6*Math.random(),-.3,-.05*k)}else if(d<2*v.duration){var y=this.easeOutQuint(d-v.duration,0,v.radius,v.duration),x=this.easeOutQuint(d-v.duration,1,-1,v.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=v.endColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(v.end.x,v.end.y,y,0,2*Math.PI),this.ctx.stroke()}else delete this.container[s],this.count--}}catch(o){u=!0,h=o}finally{try{!l&&m["return"]&&m["return"]()}finally{if(u)throw h}}this.count&&window.requestAnimationFrame(this.draw.bind(this))}},{key:"getXY",value:function(t){return{x:(2.6938*t.lon+465.4)*this.scale,y:(-2.6938*t.lat+227.066)*this.scale}}},{key:"easeOutQuint",value:function(t,e,a,r){return a*Math.sin(t/r*(Math.PI/2))+e}}]),t}(),AttackList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){var t=[],e=!0,a=!1,r=void 0;try{for(var i,n=Object.keys(this.props.list)[Symbol.iterator]();!(e=(i=n.next()).done);e=!0){var s=i.value;t.push({country:s,count:this.props.list[s]})}}catch(c){a=!0,r=c}finally{try{!e&&n["return"]&&n["return"]()}finally{if(a)throw r}}return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"attackorigin"==this.props.className?"Origin":"Targets"),React.createElement("th",null,"Count")),t.sort(function(t,e){return e.count-t.count}).slice(0,9).map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.country),React.createElement("td",null,t.count))}))}}]),e}(React.Component),RealTimeList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"Time"),React.createElement("th",null,"Origin"),React.createElement("th",null,"Targets"),React.createElement("th",null,"Type")),this.props.realtime.map(function(t){return React.createElement("tr",null,React.createElement("td",{width:"200"},t.Time),React.createElement("td",null,t.Origin),React.createElement("td",{width:"200"},t.Targets),React.createElement("td",null,t.Type))}))}}]),e}(React.Component),Info=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("div",{className:"info"},React.createElement(AttackList,{list:this.props.origin,className:"attackorigin"}),React.createElement(AttackList,{list:this.props.targets,className:"attacktargets"}),React.createElement(RealTimeList,{realtime:this.props.realtime,className:"realtime"}))}}]),e}(React.Component),map=new Map({container:document.querySelector(".map"),width:screen.width,worldmap:worldmap}),list=document.querySelector(".list"),origin={},targets={},realtime=[],ws=new WebSocket("ws://mbsd.ipviking.com:443");ws.onmessage=function(t){var e=JSON.parse(t.data),a={lat:+e.latitude,lon:+e.longitude},r={lat:+e.latitude2,lon:+e.longitude2},i=worldmap.name[e.countrycode]||"Unknow";origin[i]?origin[i]++:origin[i]=1;var n=worldmap.name[e.countrycode2]||"Unknow";targets[n]?targets[n]++:targets[n]=1,realtime.push({Time:(new Date).toLocaleString(),Origin:i,Targets:n,Type:services[e.dport]||"Unknow"}),realtime.length>8&&realtime.shift(),React.render(React.createElement(Info,{className:"info",origin:origin,targets:targets,realtime:realtime}),list),map.trigger(a,r)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyIsImluZm8uanN4IiwiYm9vdC5qcyJdLCJuYW1lcyI6WyJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJUeXBlRXJyb3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2dldCIsIl94IiwiX3gyIiwiX3gzIiwiX2FnYWluIiwib2JqZWN0IiwicHJvcGVydHkiLCJyZWNlaXZlciIsImRlc2MiLCJwYXJlbnQiLCJnZXR0ZXIiLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsImNhbGwiLCJnZXRQcm90b3R5cGVPZiIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJNYXAiLCJvcHRpb24iLCJfdGhpcyIsInRoaXMiLCJXSURUSCIsIndpZHRoIiwiSEVJR0hUIiwic2NhbGUiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwiaGVpZ2h0IiwiY29udGFpbmVyIiwiYXBwZW5kQ2hpbGQiLCJkcmF3U3ZnIiwibWFwRGF0ZSIsImdldEltYWdlRGF0YSIsInBhcnRpY2xlcyIsInBhcnRpY2xlIiwibmV4dEluZGV4IiwieCIsInkiLCJyIiwibyIsImMiLCJ4diIsInl2IiwicnYiLCJvdiIsImluZGV4IiwiY291bnQiLCJzdGFydCIsImVuZCIsImdldFhZIiwidGltZXN0YW1wIiwiRGF0ZSIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsInBhcnRpY2xlQ29sb3IiLCJpbmZvIiwiZHVyYXRpb24iLCJyYWRpdXMiLCJwYXJzZUludCIsIk1hdGgiLCJyYW5kb20iLCJzdGFnZSIsImRyYXciLCJjbGVhclJlY3QiLCJwdXRJbWFnZURhdGEiLCJub3ciLCJjbGVhciIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJrZXlzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInAiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImdsb2JhbEFscGhhIiwiZmlsbFN0eWxlIiwiZmlsbCIsImVyciIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInRpbWUiLCJlYXNlT3V0UXVpbnQiLCJvZmZzZXR4Iiwib2Zmc2V0eSIsIm9wYWNpdHkiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsIm51bVBhcnRpY2xlcyIsInNxcnQiLCJudW1QYXJ0aWNsZXNJbnQiLCJjZWlsIiwibnVtUGFydGljbGVzRGlmIiwiaiIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJpbmQiLCJsb24iLCJsYXQiLCJ0IiwiYiIsImQiLCJzaW4iLCJBdHRhY2tMaXN0IiwiX1JlYWN0JENvbXBvbmVudCIsImFwcGx5IiwiYXJndW1lbnRzIiwiY291bnRyeSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zIiwiX2RpZEl0ZXJhdG9yRXJyb3IzIiwiX2l0ZXJhdG9yRXJyb3IzIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsImxpc3QiLCJwdXNoIiwiUmVhY3QiLCJjbGFzc05hbWUiLCJzb3J0IiwiYSIsInNsaWNlIiwibWFwIiwiaXRlbSIsIkNvbXBvbmVudCIsIlJlYWxUaW1lTGlzdCIsIl9SZWFjdCRDb21wb25lbnQyIiwicmVhbHRpbWUiLCJUaW1lIiwiT3JpZ2luIiwiVGFyZ2V0cyIsIlR5cGUiLCJJbmZvIiwiX1JlYWN0JENvbXBvbmVudDMiLCJvcmlnaW4iLCJ0YXJnZXRzIiwicXVlcnlTZWxlY3RvciIsInNjcmVlbiIsIndvcmxkbWFwIiwid3MiLCJXZWJTb2NrZXQiLCJvbm1lc3NhZ2UiLCJlIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsIm9yaUNvdW50cnkiLCJuYW1lIiwidGFyQ291bnRyeSIsInRvTG9jYWxlU3RyaW5nIiwic2VydmljZXMiLCJzaGlmdCIsInJlbmRlciIsInRyaWdnZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBTUEsU0FBU0EsV0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJQyxXQUFVLGlFQUFvRUQsR0FBZUQsR0FBU0csVUFBWUMsT0FBT0MsT0FBT0osR0FBY0EsRUFBV0UsV0FBYUcsYUFBZUMsTUFBT1AsRUFBVVEsWUFBWSxFQUFPQyxVQUFVLEVBQU1DLGNBQWMsS0FBZVQsSUFBWUcsT0FBT08sZUFBaUJQLE9BQU9PLGVBQWVYLEVBQVVDLEdBQWNELEVBQVNZLFVBQVlYLEdBRWplLFFBQVNZLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJYixXQUFVLHFDQU5oSCxHQUFJYyxNQUFPLFNBQWFDLEVBQUlDLEVBQUtDLEdBQXFDLElBQTlCLEdBQUlDLElBQVMsRUFBd0JBLEdBQVEsQ0FBRSxHQUFJQyxHQUFTSixFQUFJSyxFQUFXSixFQUFLSyxFQUFXSixDQUFLSyxHQUFPQyxFQUFTQyxFQUFTQyxPQUFXUCxHQUFTLEVBQXNCLE9BQVhDLElBQWlCQSxFQUFTTyxTQUFTekIsVUFBVyxJQUFJcUIsR0FBT3BCLE9BQU95Qix5QkFBeUJSLEVBQVFDLEVBQVcsSUFBYUssU0FBVEgsRUFBSixDQUFpTixHQUFJLFNBQVdBLEdBQVEsTUFBT0EsR0FBS2pCLEtBQWdCLElBQUltQixHQUFTRixF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dGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNsYXNzIE1hcCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb24pIHtcclxuICAgICAgICB0aGlzLldJRFRIID0gb3B0aW9uLndpZHRoO1xyXG4gICAgICAgIHRoaXMuSEVJR0hUID0gb3B0aW9uLndpZHRoICogMC40O1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSB0aGlzLldJRFRIIC8gMTAwMDtcclxuXHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLldJRFRIO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuSEVJR0hUO1xyXG4gICAgICAgIG9wdGlvbi5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xyXG5cclxuICAgICAgICB0aGlzLmN0eC5kcmF3U3ZnKCd3b3JsZC5zdmcnLCAwLCAwLCB0aGlzLldJRFRILCB0aGlzLkhFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5tYXBEYXRlID0gdGhpcy5jdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuV0lEVEgsdGhpcy5IRUlHSFQpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0ge307XHJcblxyXG4gICAgICAgIHRoaXMucGFydGljbGVzID0ge31cclxuICAgICAgICB0aGlzLnBhcnRpY2xlID0gKCgpID0+IHtcclxuICAgICAgICAgIGxldCBuZXh0SW5kZXggPSAwO1xyXG4gICAgICAgICAgcmV0dXJuICh4LHkscixvLGMseHYseXYscnYsb3YpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXNbKytuZXh0SW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXHJcbiAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgIHI6IHIsXHJcbiAgICAgICAgICAgICAgbzogbyxcclxuICAgICAgICAgICAgICBjOiBjLFxyXG4gICAgICAgICAgICAgIHh2OiB4dixcclxuICAgICAgICAgICAgICB5djogeXYsXHJcbiAgICAgICAgICAgICAgcnY6IHJ2LFxyXG4gICAgICAgICAgICAgIG92OiBvdlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KSgpO1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwOy8vIHF1ZXVl5oC75pWwXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6blj5HliqjnlLtcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gc3RhcnRcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZW5kXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfVxyXG4gICAgICovXHJcbiAgICB0cmlnZ2VyKHN0YXJ0LCBlbmQpIHtcclxuICAgICAgICBzdGFydCA9IHRoaXMuZ2V0WFkoc3RhcnQpO1xyXG4gICAgICAgIGVuZCA9IHRoaXMuZ2V0WFkoZW5kKTtcclxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSArbmV3IERhdGUsXHJcbiAgICAgICAgICAgICAgc3RhcnRDb2xvciA9ICcjMjFiMzg0JyxcclxuICAgICAgICAgICAgICBlbmRDb2xvciA9ICcjZTMyNTI4JyxcclxuICAgICAgICAgICAgICBwYXJ0aWNsZUNvbG9yID0gJyNGOEJEMTknO1xyXG4gICAgICAgIGlmKHRoaXMuY29udGFpbmVyW3RpbWVzdGFtcF0pIHJldHVybjsvLyDml6DlpYhcclxuICAgICAgICBsZXQgaW5mbyA9IHtcclxuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxyXG4gICAgICAgICAgICBlbmQ6IGVuZCxcclxuICAgICAgICAgICAgc3RhcnRDb2xvcjogc3RhcnRDb2xvcixcclxuICAgICAgICAgICAgZW5kQ29sb3I6IGVuZENvbG9yLFxyXG4gICAgICAgICAgICBwYXJ0aWNsZUNvbG9yOiBwYXJ0aWNsZUNvbG9yLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMCxcclxuICAgICAgICAgICAgcmFkaXVzOiA3MCArIHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiAyMCksXHJcbiAgICAgICAgICAgIHN0YWdlOiAwLFxyXG4gICAgICAgICAgICB4djogKHN0YXJ0LnggLSBlbmQueCkgLyA1MDAsXHJcbiAgICAgICAgICAgIHl2OiAoc3RhcnQueSAtIGVuZC55KSAvIDUwMFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRhaW5lclt0aW1lc3RhbXBdID0gaW5mbztcclxuICAgICAgICBpZighKHRoaXMuY291bnQpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLDAsdGhpcy5XSURUSCx0aGlzLkhFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5jdHgucHV0SW1hZ2VEYXRhKHRoaXMubWFwRGF0ZSwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuLLmn5NcclxuICAgICAqIEByZXR1cm4ge251bGx9XHJcbiAgICAgKi9cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gK25ldyBEYXRlO1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgLy8gcGFydGljbGVzXHJcbiAgICAgICAgZm9yKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wYXJ0aWNsZXMpKSB7XHJcbiAgICAgICAgICAgIGxldCBwID0gdGhpcy5wYXJ0aWNsZXNba2V5XTtcclxuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmFyYyhwLngscC55LHAuciwwLE1hdGguUEkqMik7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gcC5vO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBwLmM7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgcC54ICs9IHAueHY7XHJcbiAgICAgICAgICAgIHAueSArPSBwLnl2O1xyXG4gICAgICAgICAgICBwLnIgKz0gcC5ydjtcclxuICAgICAgICAgICAgcC5vICs9IHAub3Y7XHJcbiAgICAgICAgICAgIGlmKHAuciA8IDAgfHwgcC5vIDwgMCkgZGVsZXRlIHRoaXMucGFydGljbGVzW3AuaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlyZWJhbGxzXHJcbiAgICAgICAgZm9yKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5jb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBub3cgLSBrZXk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLmNvbnRhaW5lcltrZXldO1xyXG4gICAgICAgICAgICBpZih0aW1lIDwgaW5mby5kdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuZWFzZU91dFF1aW50KHRpbWUsIDAsIGluZm8ucmFkaXVzLCBpbmZvLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldHggPSBpbmZvLnN0YXJ0LnggKyB0aW1lIC8gaW5mby5kdXJhdGlvbiAqIChpbmZvLmVuZC54IC0gaW5mby5zdGFydC54KTsgLy90aGlzLmVhc2VPdXRRdWludCh0aW1lLCBpbmZvLnN0YXJ0LngsIGluZm8uZW5kLnggLSBpbmZvLnN0YXJ0LngsIGluZm8uZHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0eSA9IGluZm8uc3RhcnQueSArIHRpbWUgLyBpbmZvLmR1cmF0aW9uICogKGluZm8uZW5kLnkgLSBpbmZvLnN0YXJ0LnkpOy8vdGhpcy5lYXNlT3V0UXVpbnQodGltZSwgaW5mby5zdGFydC55LCBpbmZvLmVuZC55IC0gaW5mby5zdGFydC55LCBpbmZvLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wYWNpdHkgPSB0aGlzLmVhc2VPdXRRdWludCh0aW1lLCAxLCAtMSwgaW5mby5kdXJhdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2lyY2xlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGluZm8uc3RhcnRDb2xvcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmFyYyhpbmZvLnN0YXJ0LngsIGluZm8uc3RhcnQueSwgciwgMCwgMipNYXRoLlBJKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBudW1QYXJ0aWNsZXMgPSBNYXRoLnNxcnQoaW5mby54dippbmZvLnh2K2luZm8ueXYqaW5mby55dikvNTtcclxuICAgICAgICAgICAgICAgIGlmKG51bVBhcnRpY2xlczwxKW51bVBhcnRpY2xlcz0xO1xyXG4gICAgICAgICAgICAgICAgbGV0IG51bVBhcnRpY2xlc0ludCA9IE1hdGguY2VpbChudW1QYXJ0aWNsZXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bVBhcnRpY2xlc0RpZiA9IG51bVBhcnRpY2xlcy9udW1QYXJ0aWNsZXNJbnQ7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo9MDtqPG51bVBhcnRpY2xlc0ludDtqKyspIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZShcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXR4LWluZm8ueHYqai9udW1QYXJ0aWNsZXNJbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0eS1pbmZvLnl2KmovbnVtUGFydGljbGVzSW50LFxyXG4gICAgICAgICAgICAgICAgICAgIDcsXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtUGFydGljbGVzRGlmLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZm8ucGFydGljbGVDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLnJhbmRvbSgpKjAuNixcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLnJhbmRvbSgpKjAuNixcclxuICAgICAgICAgICAgICAgICAgICAtMC4zLFxyXG4gICAgICAgICAgICAgICAgICAgIC0wLjA1Km51bVBhcnRpY2xlc0RpZlxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYodGltZSA8IGluZm8uZHVyYXRpb24gKiAyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5lYXNlT3V0UXVpbnQodGltZSAtIGluZm8uZHVyYXRpb24sIDAsIGluZm8ucmFkaXVzLCBpbmZvLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wYWNpdHkgPSB0aGlzLmVhc2VPdXRRdWludCh0aW1lIC0gaW5mby5kdXJhdGlvbiwgMSwgLTEsIGluZm8uZHVyYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNpcmNsZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBpbmZvLmVuZENvbG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gNTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguYXJjKGluZm8uZW5kLngsIGluZm8uZW5kLnksIHIsIDAsIDIqTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRhaW5lcltrZXldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudC0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuY291bnQpIHtcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmRyYXcuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uP57qs5bqmIHRvIFhZXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvblxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRYWSAob3B0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogKG9wdGlvbi5sb24gKiAyLjY5MzggKyA0NjUuNCkgKiB0aGlzLnNjYWxlLFxyXG4gICAgICAgICAgICB5OiAob3B0aW9uLmxhdCAqIC0yLjY5MzggKyAyMjcuMDY2KSAqIHRoaXMuc2NhbGVcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOe8k+WKqOWHveaVsFxyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB0IOWHhuehruaXtumXtFxyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBiIOW8gOWni+WAvFxyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBjIOaUueWPmOWAvFxyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBkIOaAu+aXtumXtFxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSAgIHZhbHVlXHJcbiAgICAgKi9cclxuICAgICBlYXNlT3V0UXVpbnQgKHQsIGIsIGMsIGQpIHtcclxuIFx0XHRyZXR1cm4gYyAqIE1hdGguc2luKHQvZCAqIChNYXRoLlBJLzIpKSArIGI7XHJcbiBcdH1cclxufVxyXG4iLCJjbGFzcyBBdHRhY2tMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY291bnRyeSA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMucHJvcHMubGlzdCkpIHtcclxuICAgICAgICAgICAgY291bnRyeS5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGNvdW50cnk6IGtleSxcclxuICAgICAgICAgICAgICAgIGNvdW50OiB0aGlzLnByb3BzLmxpc3Rba2V5XVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9eyB0aGlzLnByb3BzLmNsYXNzTmFtZSB9PlxyXG4gICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICA8dGg+eyB0aGlzLnByb3BzLmNsYXNzTmFtZSA9PSAnYXR0YWNrb3JpZ2luJyA/ICdPcmlnaW4nIDogJ1RhcmdldHMnIH08L3RoPlxyXG4gICAgICAgICAgICAgICAgICA8dGg+Q291bnQ8L3RoPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmNvdW50IC0gYS5jb3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIDkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnsgaXRlbS5jb3VudHJ5IH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnsgaXRlbS5jb3VudCB9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBSZWFsVGltZUxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyICgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT17IHRoaXMucHJvcHMuY2xhc3NOYW1lIH0+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgIDx0aD5UaW1lPC90aD5cclxuICAgICAgICAgICAgICAgICAgPHRoPk9yaWdpbjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgIDx0aD5UYXJnZXRzPC90aD5cclxuICAgICAgICAgICAgICAgICAgPHRoPlR5cGU8L3RoPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIHsgdGhpcy5wcm9wcy5yZWFsdGltZS5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPVwiMjAwXCI+eyBpdGVtLlRpbWUgfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnsgaXRlbS5PcmlnaW4gfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPVwiMjAwXCI+eyBpdGVtLlRhcmdldHMgfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnsgaXRlbS5UeXBlIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KSB9XHJcbiAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgSW5mbyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XHJcbiAgICAgICAgICAgICAgICA8QXR0YWNrTGlzdCBsaXN0PXsgdGhpcy5wcm9wcy5vcmlnaW4gfSBjbGFzc05hbWU9XCJhdHRhY2tvcmlnaW5cIiAvPlxyXG4gICAgICAgICAgICAgICAgPEF0dGFja0xpc3QgbGlzdD17IHRoaXMucHJvcHMudGFyZ2V0cyB9IGNsYXNzTmFtZT1cImF0dGFja3RhcmdldHNcIiAvPlxyXG4gICAgICAgICAgICAgICAgPFJlYWxUaW1lTGlzdCByZWFsdGltZT17IHRoaXMucHJvcHMucmVhbHRpbWUgfSBjbGFzc05hbWU9XCJyZWFsdGltZVwiIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGV0IG1hcCA9IG5ldyBNYXAoe1xyXG4gICAgY29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwJyksXHJcbiAgICB3aWR0aDogc2NyZWVuLndpZHRoLFxyXG4gICAgd29ybGRtYXA6IHdvcmxkbWFwXHJcbn0pO1xyXG5sZXQgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0Jyk7XHJcblxyXG5sZXQgb3JpZ2luID0ge30sXHJcbiAgICB0YXJnZXRzID0ge30sXHJcbiAgICByZWFsdGltZSA9IFtdO1xyXG5cclxuY29uc3Qgd3MgPSBuZXcgV2ViU29ja2V0KCd3czovL21ic2QuaXB2aWtpbmcuY29tOjQ0MycpO1xyXG53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XHJcbiAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0ge1xyXG4gICAgICAgIGxhdDogK2RhdGFbJ2xhdGl0dWRlJ10sXHJcbiAgICAgICAgbG9uOiArZGF0YVsnbG9uZ2l0dWRlJ11cclxuICAgIH07XHJcbiAgICBjb25zdCBlbmQgPSB7XHJcbiAgICAgICAgbGF0OiArZGF0YVsnbGF0aXR1ZGUyJ10sXHJcbiAgICAgICAgbG9uOiArZGF0YVsnbG9uZ2l0dWRlMiddXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3JpQ291bnRyeSA9IHdvcmxkbWFwLm5hbWVbZGF0YVsnY291bnRyeWNvZGUnXV0gfHwgJ1Vua25vdyc7XHJcbiAgICBvcmlnaW5bb3JpQ291bnRyeV0gPyBvcmlnaW5bb3JpQ291bnRyeV0rKyA6IG9yaWdpbltvcmlDb3VudHJ5XSA9IDE7XHJcbiAgICBjb25zdCB0YXJDb3VudHJ5ID0gd29ybGRtYXAubmFtZVtkYXRhWydjb3VudHJ5Y29kZTInXV0gfHwgJ1Vua25vdyc7XHJcbiAgICB0YXJnZXRzW3RhckNvdW50cnldID8gdGFyZ2V0c1t0YXJDb3VudHJ5XSsrIDogdGFyZ2V0c1t0YXJDb3VudHJ5XSA9IDE7XHJcblxyXG4gICAgcmVhbHRpbWUucHVzaCh7XHJcbiAgICAgICAgVGltZTogbmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygpLFxyXG4gICAgICAgIE9yaWdpbjogb3JpQ291bnRyeSxcclxuICAgICAgICBUYXJnZXRzOiB0YXJDb3VudHJ5LFxyXG4gICAgICAgIFR5cGU6IHNlcnZpY2VzW2RhdGFbJ2Rwb3J0J11dIHx8ICdVbmtub3cnXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZihyZWFsdGltZS5sZW5ndGggPiA4KSByZWFsdGltZS5zaGlmdCgpO1xyXG5cclxuICAgIFJlYWN0LnJlbmRlcihcclxuICAgICAgICA8SW5mbyBjbGFzc05hbWU9XCJpbmZvXCIgb3JpZ2luPXsgb3JpZ2luIH0gdGFyZ2V0cz17IHRhcmdldHMgfSByZWFsdGltZT17IHJlYWx0aW1lIH0gLz4sXHJcbiAgICAgICAgbGlzdCk7XHJcblxyXG4gICAgbWFwLnRyaWdnZXIoc3RhcnQsIGVuZCk7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==