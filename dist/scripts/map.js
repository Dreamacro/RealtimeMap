"use strict";function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _get=function(t,e,r){for(var a=!0;a;){var n=t,i=e,s=r;c=l=o=void 0,a=!1,null===n&&(n=Function.prototype);var c=Object.getOwnPropertyDescriptor(n,i);if(void 0!==c){if("value"in c)return c.value;var o=c.get;return void 0===o?void 0:o.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return void 0;t=l,e=i,r=s,a=!0}},_createClass=function(){function t(t,e){for(var r=0;r<e.length;r++){var a=e[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,r,a){return r&&t(e.prototype,r),a&&t(e,a),e}}(),Map=function(){function t(e){var r=this;_classCallCheck(this,t),this.WIDTH=e.width,this.HEIGHT=.4*e.width,this.scale=this.WIDTH/1e3,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.width=this.WIDTH,this.canvas.height=this.HEIGHT,e.container.appendChild(this.canvas),this.ctx.drawSvg("world.svg",0,0,this.WIDTH,this.HEIGHT),this.mapDate=this.ctx.getImageData(0,0,this.WIDTH,this.HEIGHT),this.container={},this.count=0,this.particles={},this.particle=function(){var t=0;return function(e,a,n,i,s,c,o,l,u){r.particles[++t]={index:t,x:e,y:a,r:n,o:i,c:s,xv:c,yv:o,rv:l,ov:u}}}()}return _createClass(t,[{key:"trigger",value:function(t,e){t=this.getXY(t),e=this.getXY(e);var r=+new Date,a="#21b384",n="#e32528",i="#F8BD19";if(!this.container[r]){var s={start:t,end:e,startColor:a,endColor:n,particleColor:i,duration:1e3,radius:70+parseInt(20*Math.random()),xv:.02*(t.x-e.x),yv:.02*(t.y-e.y)};this.container[r]=s,this.count++||this.draw()}}},{key:"clear",value:function(){this.ctx.clearRect(0,0,this.WIDTH,this.HEIGHT),this.ctx.putImageData(this.mapDate,0,0)}},{key:"draw",value:function(){var t=+new Date;this.clear();var e=!0,r=!1,a=void 0;try{for(var n,i=Object.keys(this.particles)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var s=n.value,c=this.particles[s];this.ctx.beginPath(),this.ctx.arc(c.x,c.y,c.r,0,2*Math.PI),this.ctx.globalAlpha=c.o,this.ctx.fillStyle=c.c,this.ctx.fill(),c.x+=c.xv,c.y+=c.yv,c.r+=c.rv,c.o+=c.ov,(c.r<0||c.o<0)&&delete this.particles[c.index]}}catch(o){r=!0,a=o}finally{try{!e&&i["return"]&&i["return"]()}finally{if(r)throw a}}var l=!0,u=!1,h=void 0;try{for(var p,m=Object.keys(this.container)[Symbol.iterator]();!(l=(p=m.next()).done);l=!0){var s=p.value,d=t-s,v=this.container[s];if(d<v.duration){var y=this.easeOutQuint(d,0,v.radius,v.duration),f=v.start.x+d/v.duration*(v.end.x-v.start.x),g=v.start.y+d/v.duration*(v.end.y-v.start.y),x=this.easeOutQuint(d,1,-1,v.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=v.startColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(v.start.x,v.start.y,y,0,2*Math.PI),this.ctx.stroke();var w=Math.sqrt(v.xv*v.xv+v.yv*v.yv)/5;1>w&&(w=1);for(var b=Math.ceil(w),k=w/b,E=0;b>E;E++)this.particle(f-v.xv*E/b,g-v.yv*E/b,7,k,v.particleColor,.6*Math.random()-.3,.6*Math.random()-.3,-.3,-.05*k)}else if(d<2*v.duration){var y=this.easeOutQuint(d-v.duration,0,v.radius,v.duration),x=this.easeOutQuint(d-v.duration,1,-1,v.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=v.endColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(v.end.x,v.end.y,y,0,2*Math.PI),this.ctx.stroke()}else delete this.container[s],this.count--}}catch(o){u=!0,h=o}finally{try{!l&&m["return"]&&m["return"]()}finally{if(u)throw h}}this.count&&window.requestAnimationFrame(this.draw.bind(this))}},{key:"getXY",value:function(t){return{x:(2.6938*t.lon+465.4)*this.scale,y:(-2.6938*t.lat+227.066)*this.scale}}},{key:"easeOutQuint",value:function(t,e,r,a){return r*Math.sin(t/a*(Math.PI/2))+e}}]),t}(),AttackList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){var t=[],e=!0,r=!1,a=void 0;try{for(var n,i=Object.keys(this.props.list)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var s=n.value;t.push({country:s,count:this.props.list[s]})}}catch(c){r=!0,a=c}finally{try{!e&&i["return"]&&i["return"]()}finally{if(r)throw a}}return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"attackorigin"==this.props.className?"Origin":"Targets"),React.createElement("th",null,"Count")),t.sort(function(t,e){return e.count-t.count}).slice(0,9).map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.country),React.createElement("td",null,t.count))}))}}]),e}(React.Component),RealTimeList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"Time"),React.createElement("th",null,"Origin"),React.createElement("th",null,"Targets"),React.createElement("th",null,"Type")),this.props.realtime.map(function(t){return React.createElement("tr",null,React.createElement("td",{width:"200"},t.Time),React.createElement("td",null,t.Origin),React.createElement("td",{width:"200"},t.Targets),React.createElement("td",null,t.Type))}))}}]),e}(React.Component),Info=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("div",{className:"info"},React.createElement(AttackList,{list:this.props.origin,className:"attackorigin"}),React.createElement(AttackList,{list:this.props.targets,className:"attacktargets"}),React.createElement(RealTimeList,{realtime:this.props.realtime,className:"realtime"}))}}]),e}(React.Component),map=new Map({container:document.querySelector(".map"),width:screen.width,worldmap:worldmap}),list=document.querySelector(".list"),origin={},targets={},realtime=[],ws=new WebSocket("ws://mbsd.ipviking.com:443");ws.onmessage=function(t){var e=JSON.parse(t.data),r={lat:+e.latitude,lon:+e.longitude},a={lat:+e.latitude2,lon:+e.longitude2},n=worldmap.name[e.countrycode]||"Unknow";origin[n]?origin[n]++:origin[n]=1;var i=worldmap.name[e.countrycode2]||"Unknow";targets[i]?targets[i]++:targets[i]=1,realtime.push({Time:(new Date).toLocaleString(),Origin:n,Targets:i,Type:services[e.dport]||"Unknow"}),realtime.length>8&&realtime.shift(),React.render(React.createElement(Info,{className:"info",origin:origin,targets:targets,realtime:realtime}),list),map.trigger(r,a)},ws.onerror=function(t){alert("WebSocket发生异常，请重新刷新网页。"),console.log(t)};
//# sourceMappingURL=data:application/json;base64,