"use strict";function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _get=function(t,e,a){for(var r=!0;r;){var n=t,i=e,c=a;l=o=s=void 0,r=!1,null===n&&(n=Function.prototype);var l=Object.getOwnPropertyDescriptor(n,i);if(void 0!==l){if("value"in l)return l.value;var s=l.get;return void 0===s?void 0:s.call(c)}var o=Object.getPrototypeOf(n);if(null===o)return void 0;t=o,e=i,a=c,r=!0}},_createClass=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),Map=function(){function t(e){var a=this;_classCallCheck(this,t),this.WIDTH=e.width,this.HEIGHT=.4*e.width,this.scale=this.WIDTH/1e3,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.width=this.WIDTH,this.canvas.height=this.HEIGHT,e.container.appendChild(this.canvas),this.ctx.drawSvg("world.svg",0,0,this.WIDTH,this.HEIGHT),this.mapDate=this.ctx.getImageData(0,0,this.WIDTH,this.HEIGHT),this.container={},this.count=0,this.particles={},this.particle=function(){var t=0;return function(e,r,n,i,c,l,s,o,u){a.particles[++t]={index:t,x:e,y:r,r:n,o:i,c:c,xv:l,yv:s,rv:o,ov:u}}}()}return _createClass(t,[{key:"trigger",value:function(t,e){t=this.getXY(t),e=this.getXY(e);var a=+new Date,r="#21b384",n="#e32528",i="#F8BD19";if(!this.container[a]){var c={start:t,end:e,startColor:r,endColor:n,particleColor:i,duration:1e3,radius:70+parseInt(20*Math.random()),xv:.02*(t.x-e.x),yv:.02*(t.y-e.y)};this.container[a]=c,this.count++||this.draw()}}},{key:"clear",value:function(){this.ctx.clearRect(0,0,this.WIDTH,this.HEIGHT),this.ctx.putImageData(this.mapDate,0,0)}},{key:"draw",value:function(){var t=+new Date;this.clear();var e=!0,a=!1,r=void 0;try{for(var n,i=Object.keys(this.particles)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var c=n.value,l=this.particles[c];this.ctx.beginPath(),this.ctx.arc(l.x,l.y,l.r,0,2*Math.PI),this.ctx.globalAlpha=l.o,this.ctx.fillStyle=l.c,this.ctx.fill(),l.x+=l.xv,l.y+=l.yv,l.r+=l.rv,l.o+=l.ov,(l.r<0||l.o<0)&&delete this.particles[l.index]}}catch(s){a=!0,r=s}finally{try{!e&&i["return"]&&i["return"]()}finally{if(a)throw r}}var o=!0,u=!1,h=void 0;try{for(var p,m=Object.keys(this.container)[Symbol.iterator]();!(o=(p=m.next()).done);o=!0){var c=p.value,d=t-c,v=this.container[c];if(d<v.duration){var y=this.easeOutQuint(d,0,v.radius,v.duration),f=v.start.x+d/v.duration*(v.end.x-v.start.x),g=v.start.y+d/v.duration*(v.end.y-v.start.y),x=this.easeOutQuint(d,1,-1,v.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=v.startColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(v.start.x,v.start.y,y,0,2*Math.PI),this.ctx.stroke();var w=Math.sqrt(v.xv*v.xv+v.yv*v.yv)/5;1>w&&(w=1);for(var E=Math.ceil(w),R=w/E,b=0;E>b;b++)this.particle(f-v.xv*b/E,g-v.yv*b/E,7,R,v.particleColor,.6*Math.random()-.3,.6*Math.random()-.3,-.3,-.05*R)}else if(d<2*v.duration){var y=this.easeOutQuint(d-v.duration,0,v.radius,v.duration),x=this.easeOutQuint(d-v.duration,1,-1,v.duration);this.ctx.globalAlpha=x,this.ctx.strokeStyle=v.endColor,this.ctx.lineWidth=5,this.ctx.beginPath(),this.ctx.arc(v.end.x,v.end.y,y,0,2*Math.PI),this.ctx.stroke()}else delete this.container[c],this.count--}}catch(s){u=!0,h=s}finally{try{!o&&m["return"]&&m["return"]()}finally{if(u)throw h}}this.count&&window.requestAnimationFrame(this.draw.bind(this))}},{key:"getXY",value:function(t){return{x:(2.6938*t.lon+465.4)*this.scale,y:(-2.6938*t.lat+227.066)*this.scale}}},{key:"easeOutQuint",value:function(t,e,a,r){return a*Math.sin(t/r*(Math.PI/2))+e}}]),t}(),AttackList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){var t=[],e=!0,a=!1,r=void 0;try{for(var n,i=Object.keys(this.props.list)[Symbol.iterator]();!(e=(n=i.next()).done);e=!0){var c=n.value;t.push({country:c,count:this.props.list[c]})}}catch(l){a=!0,r=l}finally{try{!e&&i["return"]&&i["return"]()}finally{if(a)throw r}}return React.createElement("table",{className:this.props.className},React.createElement("tr",null,React.createElement("th",null,"#"),React.createElement("th",null,"attackorigin"==this.props.className?"Origin":"Targets")),t.sort(function(t,e){return e.count-t.count}).slice(0,9).map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.count),React.createElement("td",null,t.country))}))}}]),e}(React.Component),RealTimeList=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("table",{className:this.props.className},React.createElement("tbody",null,React.createElement("tr",{className:"first-head"},React.createElement("th",null,"Timestamp"),React.createElement("th",{colSpan:"3"},"Attacker"),React.createElement("th",null,"Target"),React.createElement("th",{colSpan:"2"},"Type")),React.createElement("tr",null,React.createElement("th",{width:"200px"}),React.createElement("th",{width:"280px"},"Origin"),React.createElement("th",{width:"240px"},"Location"),React.createElement("th",{width:"160px"},"IP"),React.createElement("th",{width:"200px"},"Location"),React.createElement("th",{width:"100px"},"Service"),React.createElement("th",null,"Port"))),this.props.realtime.map(function(t){return React.createElement("tr",null,React.createElement("td",null,t.Time),React.createElement("td",null,t.Origin.org),React.createElement("td",null,t.Origin.location),React.createElement("td",null,t.Origin.ip),React.createElement("td",null,t.Targets),React.createElement("td",null,t.Type.service),React.createElement("td",null,t.Type.port))}))}}]),e}(React.Component),Info=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return _inherits(e,t),_createClass(e,[{key:"render",value:function(){return React.createElement("div",{className:"info"},React.createElement(AttackList,{list:this.props.origin,className:"attackorigin"}),React.createElement(AttackList,{list:this.props.targets,className:"attacktargets"}),React.createElement(RealTimeList,{realtime:this.props.realtime,className:"realtime"}))}}]),e}(React.Component),map=new Map({container:document.querySelector(".map"),width:screen.width,worldmap:worldmap}),list=document.querySelector(".list"),origin={},targets={},realtime=[],ws=new WebSocket("ws://mbsd.ipviking.com:443");ws.onmessage=function(t){var e=JSON.parse(t.data),a={lat:+e.latitude,lon:+e.longitude},r={lat:+e.latitude2,lon:+e.longitude2},n=worldmap.name[e.countrycode]||"Unknow";origin[n]?origin[n]++:origin[n]=1;var i=worldmap.name[e.countrycode2]||"Unknow";targets[i]?targets[i]++:targets[i]=1,realtime.push({Time:(new Date).toLocaleString(),Origin:{org:e.org,location:e.city+","+n,ip:e.md5},Targets:i,Type:{service:e.svc,port:e.dport}}),realtime.length>8&&realtime.shift(),React.render(React.createElement(Info,{className:"info",origin:origin,targets:targets,realtime:realtime}),list),map.trigger(a,r)},ws.onerror=function(t){alert("WebSocket发生异常，请重新刷新网页。"),console.log(t)};
//# sourceMappingURL=data:application/json;base64,